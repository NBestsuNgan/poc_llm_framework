x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.3}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
    minio:
      condition: service_started

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      llm_net:

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      llm_net:

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      llm_net:

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      llm_net:

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      llm_net:
    
  jupyter:
    image: jupyter/base-notebook:latest
    container_name: jupyter_notebook
    networks:
      llm_net:
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/notebooks  # Mount a local folder for persistence
    environment:
      - JUPYTER_ENABLE_LAB=yes
    command: jupyter-notebook --NotebookApp.token='' --NotebookApp.password=''
    restart: unless-stopped

      
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_DOMAIN=minio
    networks:
      llm_net:
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - minio-data:/data

  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      llm_net:
    environment:
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minioadmin minioadmin) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc policy set public minio/airflow-data;
      tail -f /dev/null
      "      

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    networks:
      llm_net:
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    entrypoint:
      # [
      #   "/bin/bash",
      #   "-c",
      #   "ollama serve & sleep 5 && ollama pull deepseek-r1:7b && ollama pull mxbai-embed-large && wait",
      # ]

      # check if the model availiable or not then if it not else do nothing
      [
        "/bin/bash",
        "-c",
        "ollama serve & sleep 5 && \
         [ -f /root/.ollama/models/deepseek-r1:7b ] || ollama pull deepseek-r1:7b && \
         [ -f /root/.ollama/models/mxbai-embed-large ] || ollama pull mxbai-embed-large && \
         [ -f /root/.ollama/models/nomic-embed-text ] || ollama pull nomic-embed-text && \
         [ -f /root/.ollama/models/llama3-groq-tool-use:8b ] || ollama pull llama3-groq-tool-use:8b && \
         [ -f /root/.ollama/models/PetrosStav/gemma3-tools:4b ] || ollama pull PetrosStav/gemma3-tools:4b && \
         [ -f /root/.ollama/models/qwen2.5:7b ] || ollama pull qwen2.5:7b && \
         wait"
      ]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:11434/v1/health"]
      interval: 30s
      retries: 5
      timeout: 10s


  weaviate:
    image: cr.weaviate.io/semitechnologies/weaviate:1.30.0
    container_name: weaviate
    environment:
      # - ENABLE_MODULES=text2vec-ollama
      # - OLLAMA_URL=http://ollama:11434
      # - WEAVIATE_HOST=0.0.0.0
      # - QUERY_DEFAULTS_LIMIT=40
      # - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      # - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      # - DEFAULT_VECTORIZER_MODULE=text2vec-ollama
      # - CLUSTER_HOSTNAME=node1
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - ENABLE_API_BASED_MODULES=true
      - ENABLE_MODULES=text2vec-ollama,generative-ollama
      - CLUSTER_HOSTNAME=node1
      - DEFAULT_VECTORIZER_MODULE=text2vec-ollama
      - GATEWAY_TIMEOUT=600s
      - TRANSFORMERS_INFERENCE_API=http://host.docker.internal:11434
      - OLLAMA_API_ENDPOINT=http://host.docker.internal:11434
    ports:
      - "8081:8080"
      - "50051:50051" 
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      llm_net:
    command:
      - --host
      - 0.0.0.0
      - --port
      - '8080'
      - --scheme
      - http
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      llm_net:
    restart: unless-stopped

  oracle-db:
    image: gvenzl/oracle-xe:21-slim
    container_name: oracle-xe
    ports:
      - "1521:1521"   # Oracle listener port
      - "5500:5500"   # Oracle EM Express (optional)
    environment:
      - ORACLE_PASSWORD=oracle
    volumes:
      - oracle_data:/opt/oracle/oradata
    restart: unless-stopped



networks:
  llm_net:
    driver: bridge

volumes:
  postgres-db-volume:
  minio-data:
  ollama_data:
  weaviate_data:
  oracle_data: